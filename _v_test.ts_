type CompositeBlockType = 'composite';
type CommonBlockType = 'block';

type BlockType = CommonBlockType | CompositeBlockType;

interface WorkflowTreeItemData {
    uid: string;
    parentId: string;
    name: string;
}

interface WorkflowTreeCompositeData extends WorkflowTreeItemData {
    type: CompositeBlockType;
    current: boolean;
    blocks: Array<WorkflowTreeNode>;
}

interface WorkflowTreeBlockData extends WorkflowTreeItemData {
    type: CommonBlockType;
    icon_svg_text: string;
}

interface TreeBlockData {
    uid: string;
    name: string;
    type: string;
    parentId: string;
    protoblock: any;
}

declare var AppConstants: any;

type WorkflowTreeNode = WorkflowTreeCompositeData | WorkflowTreeBlockData;

class Test {
    private _exractTreeBlockData(uid: string, data: Array<TreeBlockData>): WorkflowTreeNode {
        let blockData: TreeBlockData = data.find(block => block.uid === uid);
        let result: WorkflowTreeNode = {
            uid: blockData.uid,
            parentId: blockData.parentId,
            type: (blockData.type as CompositeBlockType),
            name: blockData.name
        };

        // if (blockData.type === AppConstants.COMPOSITE_BLOCK_TYPE) {
        //     (result as WorkflowTreeCompositeData).blocks = data.filter(block => block.parentId === uid)
        //         .map(block => this._exractTreeBlockData(block.uid, data));
        //     (result as WorkflowTreeCompositeData).current = false;
        // } else if (blockData.type === AppConstants.COMMON_BLOCK_TYPE) {
        //     (result as WorkflowTreeBlockData).icon_svg_text = blockData.protoblock.icon;
        // }

        return (result as WorkflowTreeNode);
    }
}
